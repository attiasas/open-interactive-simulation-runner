plugins { id 'org.beryx.runtime' version '1.8.4' }

mainClassName = "org.attias.open.interactive.simulation.desktop.DesktopLauncher"
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)

ext {
    assetsDir = new File("../assets")
}

gradle.projectsEvaluated {
    def assetDirPath = System.getenv('OIS_ENV_PROJECT_ASSETS_DIR')
    if (assetDirPath) {
        def assetsDirFile = new File(assetDirPath)
        if (assetsDirFile.exists() && assetsDirFile.isDirectory()) {
            assetsDir = assetsDirFile
        }
    }
    println "Assets directory set to: ${assetsDir.absolutePath}"
    sourceSets.main.resources.srcDirs = [assetsDir]
}

task runSimulation(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    duplicatesStrategy = 'include'
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    archiveFileName = System.getenv('OIS_ENV_PROJECT_NAME') + '.jar'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    destinationDirectory = file("$buildDir/lib")
}
jpackageImage.dependsOn dist
dist.dependsOn classes

runtime {
    options = ['--strip-debug',
               '--compress', '2',
               '--no-header-files',
               '--no-man-pages',
               '--strip-native-commands',
               '--vm', 'server']
    modules = ['java.base' ,
               'java.desktop',
               'jdk.unsupported']
    distDir = file(buildDir)

    jpackage {
        //jpackageHome = '/usr/lib/jvm/open-jdk'
        mainJar = dist.archiveFileName.get()
        if (osName.contains('windows')) {
            imageOptions = ["--icon", file("../assets/ois/icons/icon128.ico")]
        } else if (osName.contains('linux')) {
            imageOptions = ["--icon", file("../assets/ois/icons/icon128.png")]
        } else if (osName.contains('mac')) {
            imageOptions = ["--icon", file("../assets/ois/icons/icon128.icns")]
        }
    }
}